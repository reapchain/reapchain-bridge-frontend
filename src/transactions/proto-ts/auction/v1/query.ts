/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: auction/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../gogoproto/gogo";
import * as dependency_2 from "./params";
import * as dependency_3 from "./auction";
import * as dependency_4 from "./../../google/api/annotations";
import * as dependency_5 from "./../../cosmos/base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace auction.v1 {
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_2.auction.v1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_2.auction.v1.Params, 1) as dependency_2.auction.v1.Params;
        }
        set params(value: dependency_2.auction.v1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_2.auction.v1.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_2.auction.v1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_2.auction.v1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_2.auction.v1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryAuctionPeriodRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryAuctionPeriodRequest {
            const message = new QueryAuctionPeriodRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionPeriodRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionPeriodRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionPeriodRequest {
            return QueryAuctionPeriodRequest.deserialize(bytes);
        }
    }
    export class QueryAuctionPeriodResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auction_period?: dependency_3.auction.v1.AuctionPeriod;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction_period" in data && data.auction_period != undefined) {
                    this.auction_period = data.auction_period;
                }
            }
        }
        get auction_period() {
            return pb_1.Message.getWrapperField(this, dependency_3.auction.v1.AuctionPeriod, 1) as dependency_3.auction.v1.AuctionPeriod;
        }
        set auction_period(value: dependency_3.auction.v1.AuctionPeriod) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_auction_period() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            auction_period?: ReturnType<typeof dependency_3.auction.v1.AuctionPeriod.prototype.toObject>;
        }): QueryAuctionPeriodResponse {
            const message = new QueryAuctionPeriodResponse({});
            if (data.auction_period != null) {
                message.auction_period = dependency_3.auction.v1.AuctionPeriod.fromObject(data.auction_period);
            }
            return message;
        }
        toObject() {
            const data: {
                auction_period?: ReturnType<typeof dependency_3.auction.v1.AuctionPeriod.prototype.toObject>;
            } = {};
            if (this.auction_period != null) {
                data.auction_period = this.auction_period.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_auction_period)
                writer.writeMessage(1, this.auction_period, () => this.auction_period.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionPeriodResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionPeriodResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auction_period, () => message.auction_period = dependency_3.auction.v1.AuctionPeriod.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionPeriodResponse {
            return QueryAuctionPeriodResponse.deserialize(bytes);
        }
    }
    export class QueryAuctionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryAuctionsRequest {
            const message = new QueryAuctionsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionsRequest {
            return QueryAuctionsRequest.deserialize(bytes);
        }
    }
    export class QueryAuctionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auctions?: dependency_3.auction.v1.Auction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auctions" in data && data.auctions != undefined) {
                    this.auctions = data.auctions;
                }
            }
        }
        get auctions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.auction.v1.Auction, 1) as dependency_3.auction.v1.Auction[];
        }
        set auctions(value: dependency_3.auction.v1.Auction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            auctions?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>[];
        }): QueryAuctionsResponse {
            const message = new QueryAuctionsResponse({});
            if (data.auctions != null) {
                message.auctions = data.auctions.map(item => dependency_3.auction.v1.Auction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                auctions?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>[];
            } = {};
            if (this.auctions != null) {
                data.auctions = this.auctions.map((item: dependency_3.auction.v1.Auction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.auctions.length)
                writer.writeRepeatedMessage(1, this.auctions, (item: dependency_3.auction.v1.Auction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auctions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.auction.v1.Auction.deserialize(reader), dependency_3.auction.v1.Auction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionsResponse {
            return QueryAuctionsResponse.deserialize(bytes);
        }
    }
    export class QueryAuctionByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auction_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction_id" in data && data.auction_id != undefined) {
                    this.auction_id = data.auction_id;
                }
            }
        }
        get auction_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set auction_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            auction_id?: number;
        }): QueryAuctionByIdRequest {
            const message = new QueryAuctionByIdRequest({});
            if (data.auction_id != null) {
                message.auction_id = data.auction_id;
            }
            return message;
        }
        toObject() {
            const data: {
                auction_id?: number;
            } = {};
            if (this.auction_id != null) {
                data.auction_id = this.auction_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.auction_id != 0)
                writer.writeUint64(1, this.auction_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.auction_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionByIdRequest {
            return QueryAuctionByIdRequest.deserialize(bytes);
        }
    }
    export class QueryAuctionByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auction?: dependency_3.auction.v1.Auction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction" in data && data.auction != undefined) {
                    this.auction = data.auction;
                }
            }
        }
        get auction() {
            return pb_1.Message.getWrapperField(this, dependency_3.auction.v1.Auction, 1) as dependency_3.auction.v1.Auction;
        }
        set auction(value: dependency_3.auction.v1.Auction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_auction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            auction?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>;
        }): QueryAuctionByIdResponse {
            const message = new QueryAuctionByIdResponse({});
            if (data.auction != null) {
                message.auction = dependency_3.auction.v1.Auction.fromObject(data.auction);
            }
            return message;
        }
        toObject() {
            const data: {
                auction?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>;
            } = {};
            if (this.auction != null) {
                data.auction = this.auction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_auction)
                writer.writeMessage(1, this.auction, () => this.auction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auction, () => message.auction = dependency_3.auction.v1.Auction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionByIdResponse {
            return QueryAuctionByIdResponse.deserialize(bytes);
        }
    }
    export class QueryAuctionByDenomRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auction_denom?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction_denom" in data && data.auction_denom != undefined) {
                    this.auction_denom = data.auction_denom;
                }
            }
        }
        get auction_denom() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set auction_denom(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            auction_denom?: string;
        }): QueryAuctionByDenomRequest {
            const message = new QueryAuctionByDenomRequest({});
            if (data.auction_denom != null) {
                message.auction_denom = data.auction_denom;
            }
            return message;
        }
        toObject() {
            const data: {
                auction_denom?: string;
            } = {};
            if (this.auction_denom != null) {
                data.auction_denom = this.auction_denom;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.auction_denom.length)
                writer.writeString(1, this.auction_denom);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionByDenomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionByDenomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.auction_denom = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionByDenomRequest {
            return QueryAuctionByDenomRequest.deserialize(bytes);
        }
    }
    export class QueryAuctionByDenomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auction?: dependency_3.auction.v1.Auction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auction" in data && data.auction != undefined) {
                    this.auction = data.auction;
                }
            }
        }
        get auction() {
            return pb_1.Message.getWrapperField(this, dependency_3.auction.v1.Auction, 1) as dependency_3.auction.v1.Auction;
        }
        set auction(value: dependency_3.auction.v1.Auction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_auction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            auction?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>;
        }): QueryAuctionByDenomResponse {
            const message = new QueryAuctionByDenomResponse({});
            if (data.auction != null) {
                message.auction = dependency_3.auction.v1.Auction.fromObject(data.auction);
            }
            return message;
        }
        toObject() {
            const data: {
                auction?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>;
            } = {};
            if (this.auction != null) {
                data.auction = this.auction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_auction)
                writer.writeMessage(1, this.auction, () => this.auction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionByDenomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionByDenomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auction, () => message.auction = dependency_3.auction.v1.Auction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionByDenomResponse {
            return QueryAuctionByDenomResponse.deserialize(bytes);
        }
    }
    export class QueryAllAuctionsByBidderRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryAllAuctionsByBidderRequest {
            const message = new QueryAllAuctionsByBidderRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAllAuctionsByBidderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAllAuctionsByBidderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAllAuctionsByBidderRequest {
            return QueryAllAuctionsByBidderRequest.deserialize(bytes);
        }
    }
    export class QueryAllAuctionsByBidderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auctions?: dependency_3.auction.v1.Auction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auctions" in data && data.auctions != undefined) {
                    this.auctions = data.auctions;
                }
            }
        }
        get auctions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.auction.v1.Auction, 1) as dependency_3.auction.v1.Auction[];
        }
        set auctions(value: dependency_3.auction.v1.Auction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            auctions?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>[];
        }): QueryAllAuctionsByBidderResponse {
            const message = new QueryAllAuctionsByBidderResponse({});
            if (data.auctions != null) {
                message.auctions = data.auctions.map(item => dependency_3.auction.v1.Auction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                auctions?: ReturnType<typeof dependency_3.auction.v1.Auction.prototype.toObject>[];
            } = {};
            if (this.auctions != null) {
                data.auctions = this.auctions.map((item: dependency_3.auction.v1.Auction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.auctions.length)
                writer.writeRepeatedMessage(1, this.auctions, (item: dependency_3.auction.v1.Auction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAllAuctionsByBidderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAllAuctionsByBidderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auctions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.auction.v1.Auction.deserialize(reader), dependency_3.auction.v1.Auction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAllAuctionsByBidderResponse {
            return QueryAllAuctionsByBidderResponse.deserialize(bytes);
        }
    }
    export class QueryAuctionPoolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryAuctionPoolRequest {
            const message = new QueryAuctionPoolRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionPoolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionPoolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionPoolRequest {
            return QueryAuctionPoolRequest.deserialize(bytes);
        }
    }
    export class QueryAuctionPoolResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            balances?: dependency_5.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.cosmos.base.v1beta1.Coin, 2) as dependency_5.cosmos.base.v1beta1.Coin[];
        }
        set balances(value: dependency_5.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            account?: string;
            balances?: ReturnType<typeof dependency_5.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): QueryAuctionPoolResponse {
            const message = new QueryAuctionPoolResponse({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.balances != null) {
                message.balances = data.balances.map(item => dependency_5.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                balances?: ReturnType<typeof dependency_5.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.balances != null) {
                data.balances = this.balances.map((item: dependency_5.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.balances.length)
                writer.writeRepeatedMessage(2, this.balances, (item: dependency_5.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuctionPoolResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuctionPoolResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_5.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuctionPoolResponse {
            return QueryAuctionPoolResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Params: {
                path: "/auction.v1.Query/Params",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryParamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryParamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryParamsResponse.deserialize(new Uint8Array(bytes))
            },
            AuctionPeriod: {
                path: "/auction.v1.Query/AuctionPeriod",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAuctionPeriodRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAuctionPeriodRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAuctionPeriodResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAuctionPeriodResponse.deserialize(new Uint8Array(bytes))
            },
            Auctions: {
                path: "/auction.v1.Query/Auctions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAuctionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAuctionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAuctionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAuctionsResponse.deserialize(new Uint8Array(bytes))
            },
            AuctionById: {
                path: "/auction.v1.Query/AuctionById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAuctionByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAuctionByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAuctionByIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAuctionByIdResponse.deserialize(new Uint8Array(bytes))
            },
            AuctionByDenom: {
                path: "/auction.v1.Query/AuctionByDenom",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAuctionByDenomRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAuctionByDenomRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAuctionByDenomResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAuctionByDenomResponse.deserialize(new Uint8Array(bytes))
            },
            AllAuctionsByBidder: {
                path: "/auction.v1.Query/AllAuctionsByBidder",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAllAuctionsByBidderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAllAuctionsByBidderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAllAuctionsByBidderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAllAuctionsByBidderResponse.deserialize(new Uint8Array(bytes))
            },
            AuctionPool: {
                path: "/auction.v1.Query/AuctionPool",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAuctionPoolRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAuctionPoolRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAuctionPoolResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAuctionPoolResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Params(call: grpc_1.ServerUnaryCall<QueryParamsRequest, QueryParamsResponse>, callback: grpc_1.sendUnaryData<QueryParamsResponse>): void;
        abstract AuctionPeriod(call: grpc_1.ServerUnaryCall<QueryAuctionPeriodRequest, QueryAuctionPeriodResponse>, callback: grpc_1.sendUnaryData<QueryAuctionPeriodResponse>): void;
        abstract Auctions(call: grpc_1.ServerUnaryCall<QueryAuctionsRequest, QueryAuctionsResponse>, callback: grpc_1.sendUnaryData<QueryAuctionsResponse>): void;
        abstract AuctionById(call: grpc_1.ServerUnaryCall<QueryAuctionByIdRequest, QueryAuctionByIdResponse>, callback: grpc_1.sendUnaryData<QueryAuctionByIdResponse>): void;
        abstract AuctionByDenom(call: grpc_1.ServerUnaryCall<QueryAuctionByDenomRequest, QueryAuctionByDenomResponse>, callback: grpc_1.sendUnaryData<QueryAuctionByDenomResponse>): void;
        abstract AllAuctionsByBidder(call: grpc_1.ServerUnaryCall<QueryAllAuctionsByBidderRequest, QueryAllAuctionsByBidderResponse>, callback: grpc_1.sendUnaryData<QueryAllAuctionsByBidderResponse>): void;
        abstract AuctionPool(call: grpc_1.ServerUnaryCall<QueryAuctionPoolRequest, QueryAuctionPoolResponse>, callback: grpc_1.sendUnaryData<QueryAuctionPoolResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Params: GrpcUnaryServiceInterface<QueryParamsRequest, QueryParamsResponse> = (message: QueryParamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, callback?: grpc_1.requestCallback<QueryParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.Params(message, metadata, options, callback);
        };
        AuctionPeriod: GrpcUnaryServiceInterface<QueryAuctionPeriodRequest, QueryAuctionPeriodResponse> = (message: QueryAuctionPeriodRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionPeriodResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionPeriodResponse>, callback?: grpc_1.requestCallback<QueryAuctionPeriodResponse>): grpc_1.ClientUnaryCall => {
            return super.AuctionPeriod(message, metadata, options, callback);
        };
        Auctions: GrpcUnaryServiceInterface<QueryAuctionsRequest, QueryAuctionsResponse> = (message: QueryAuctionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionsResponse>, callback?: grpc_1.requestCallback<QueryAuctionsResponse>): grpc_1.ClientUnaryCall => {
            return super.Auctions(message, metadata, options, callback);
        };
        AuctionById: GrpcUnaryServiceInterface<QueryAuctionByIdRequest, QueryAuctionByIdResponse> = (message: QueryAuctionByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionByIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionByIdResponse>, callback?: grpc_1.requestCallback<QueryAuctionByIdResponse>): grpc_1.ClientUnaryCall => {
            return super.AuctionById(message, metadata, options, callback);
        };
        AuctionByDenom: GrpcUnaryServiceInterface<QueryAuctionByDenomRequest, QueryAuctionByDenomResponse> = (message: QueryAuctionByDenomRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionByDenomResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionByDenomResponse>, callback?: grpc_1.requestCallback<QueryAuctionByDenomResponse>): grpc_1.ClientUnaryCall => {
            return super.AuctionByDenom(message, metadata, options, callback);
        };
        AllAuctionsByBidder: GrpcUnaryServiceInterface<QueryAllAuctionsByBidderRequest, QueryAllAuctionsByBidderResponse> = (message: QueryAllAuctionsByBidderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAllAuctionsByBidderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAllAuctionsByBidderResponse>, callback?: grpc_1.requestCallback<QueryAllAuctionsByBidderResponse>): grpc_1.ClientUnaryCall => {
            return super.AllAuctionsByBidder(message, metadata, options, callback);
        };
        AuctionPool: GrpcUnaryServiceInterface<QueryAuctionPoolRequest, QueryAuctionPoolResponse> = (message: QueryAuctionPoolRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionPoolResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAuctionPoolResponse>, callback?: grpc_1.requestCallback<QueryAuctionPoolResponse>): grpc_1.ClientUnaryCall => {
            return super.AuctionPool(message, metadata, options, callback);
        };
    }
}
