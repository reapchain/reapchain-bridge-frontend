/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: auction/v1/auction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../cosmos/base/v1beta1/coin";
import * as dependency_2 from "./../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace auction.v1 {
    export class AuctionPeriod extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_block_height?: number;
            end_block_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_block_height" in data && data.start_block_height != undefined) {
                    this.start_block_height = data.start_block_height;
                }
                if ("end_block_height" in data && data.end_block_height != undefined) {
                    this.end_block_height = data.end_block_height;
                }
            }
        }
        get start_block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_block_height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_block_height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            start_block_height?: number;
            end_block_height?: number;
        }): AuctionPeriod {
            const message = new AuctionPeriod({});
            if (data.start_block_height != null) {
                message.start_block_height = data.start_block_height;
            }
            if (data.end_block_height != null) {
                message.end_block_height = data.end_block_height;
            }
            return message;
        }
        toObject() {
            const data: {
                start_block_height?: number;
                end_block_height?: number;
            } = {};
            if (this.start_block_height != null) {
                data.start_block_height = this.start_block_height;
            }
            if (this.end_block_height != null) {
                data.end_block_height = this.end_block_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_block_height != 0)
                writer.writeUint64(1, this.start_block_height);
            if (this.end_block_height != 0)
                writer.writeUint64(2, this.end_block_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuctionPeriod {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuctionPeriod();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_block_height = reader.readUint64();
                        break;
                    case 2:
                        message.end_block_height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuctionPeriod {
            return AuctionPeriod.deserialize(bytes);
        }
    }
    export class Auction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            amount?: dependency_1.cosmos.base.v1beta1.Coin;
            highest_bid?: Bid;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("highest_bid" in data && data.highest_bid != undefined) {
                    this.highest_bid = data.highest_bid;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 2) as dependency_1.cosmos.base.v1beta1.Coin;
        }
        set amount(value: dependency_1.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get highest_bid() {
            return pb_1.Message.getWrapperField(this, Bid, 3) as Bid;
        }
        set highest_bid(value: Bid) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_highest_bid() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            id?: number;
            amount?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
            highest_bid?: ReturnType<typeof Bid.prototype.toObject>;
        }): Auction {
            const message = new Auction({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.amount != null) {
                message.amount = dependency_1.cosmos.base.v1beta1.Coin.fromObject(data.amount);
            }
            if (data.highest_bid != null) {
                message.highest_bid = Bid.fromObject(data.highest_bid);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                amount?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>;
                highest_bid?: ReturnType<typeof Bid.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.highest_bid != null) {
                data.highest_bid = this.highest_bid.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.has_amount)
                writer.writeMessage(2, this.amount, () => this.amount.serialize(writer));
            if (this.has_highest_bid)
                writer.writeMessage(3, this.highest_bid, () => this.highest_bid.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Auction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Auction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.highest_bid, () => message.highest_bid = Bid.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Auction {
            return Auction.deserialize(bytes);
        }
    }
    export class Bid extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bid_amount?: number;
            bidder_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bid_amount" in data && data.bid_amount != undefined) {
                    this.bid_amount = data.bid_amount;
                }
                if ("bidder_address" in data && data.bidder_address != undefined) {
                    this.bidder_address = data.bidder_address;
                }
            }
        }
        get bid_amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set bid_amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bidder_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bidder_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            bid_amount?: number;
            bidder_address?: string;
        }): Bid {
            const message = new Bid({});
            if (data.bid_amount != null) {
                message.bid_amount = data.bid_amount;
            }
            if (data.bidder_address != null) {
                message.bidder_address = data.bidder_address;
            }
            return message;
        }
        toObject() {
            const data: {
                bid_amount?: number;
                bidder_address?: string;
            } = {};
            if (this.bid_amount != null) {
                data.bid_amount = this.bid_amount;
            }
            if (this.bidder_address != null) {
                data.bidder_address = this.bidder_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bid_amount != 0)
                writer.writeUint64(1, this.bid_amount);
            if (this.bidder_address.length)
                writer.writeString(2, this.bidder_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bid {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bid();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bid_amount = reader.readUint64();
                        break;
                    case 2:
                        message.bidder_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Bid {
            return Bid.deserialize(bytes);
        }
    }
    export class AuctionId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): AuctionId {
            const message = new AuctionId({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuctionId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuctionId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuctionId {
            return AuctionId.deserialize(bytes);
        }
    }
}
